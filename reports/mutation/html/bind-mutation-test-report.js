document.querySelector('mutation-test-report-app').report = {"files":{"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/adapter/controller/CuponController.test.ts":{"language":"typescript","mutants":[{"id":"1","location":{"end":{"column":2,"line":41},"start":{"column":38,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"0","location":{"end":{"column":30,"line":11},"start":{"column":10,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"},{"id":"2","location":{"end":{"column":4,"line":16},"start":{"column":24,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"3","location":{"end":{"column":8,"line":18},"start":{"column":6,"line":18}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Timeout"},{"id":"4","location":{"end":{"column":4,"line":39},"start":{"column":20,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"6","location":{"end":{"column":92,"line":24},"start":{"column":41,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Timeout"},{"id":"5","location":{"end":{"column":32,"line":20},"start":{"column":13,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"},{"id":"7","location":{"end":{"column":91,"line":24},"start":{"column":59,"line":24}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Timeout"},{"id":"8","location":{"end":{"column":90,"line":24},"start":{"column":81,"line":24}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Timeout"},{"id":"9","location":{"end":{"column":89,"line":24},"start":{"column":82,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Timeout"},{"id":"10","location":{"end":{"column":35,"line":32},"start":{"column":18,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"},{"id":"11","location":{"end":{"column":35,"line":33},"start":{"column":21,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"},{"id":"12","location":{"end":{"column":14,"line":37},"start":{"column":28,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import supertest from \"supertest\";\nimport \"reflect-metadata\";\nimport {\n  cleanUpMetadata,\n  InversifyExpressServer\n} from 'inversify-express-utils';\nimport { Container } from \"inversify\";\nimport { CuponByRutQuery } from \"../../application/port/in/CuponByRutQuery\";\nimport TYPES from \"../../config/types\";\n\ndescribe(\"Integration Tests:\", () => {\n\n  beforeEach((done) => {\n      cleanUpMetadata();\n      done();\n  });\n\n  it('', (done) => {\n\n    require('./CuponController');\n\n    const container = new Container();\n\n    const mockedQuery:CuponByRutQuery = { listCuponByRut: () => Promise.resolve([{id: 1}])};\n\n    container.bind<CuponByRutQuery>(TYPES.CuponByRutQuery)\n      .toConstantValue(mockedQuery);\n\n    const server = new InversifyExpressServer(container).build();\n\n    supertest(server)\n            .get(\"/api/v1/cupones\")\n            .expect('Content-Type', /json/)\n            .expect(res => {\n               expect(res.body).toBeInstanceOf(Array);\n               expect(res.body).toHaveLength(1);\n            })\n            .expect(200, done);\n  });\n\n});\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/adapter/controller/CuponController.ts":{"language":"typescript","mutants":[{"id":"13","location":{"end":{"column":2,"line":12},"start":{"column":10,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":4,"line":18},"start":{"column":88,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":30,"line":13},"start":{"column":13,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"18","location":{"end":{"column":4,"line":26},"start":{"column":20,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"14","location":{"end":{"column":26,"line":10},"start":{"column":9,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"},{"id":"19","location":{"end":{"column":41,"line":21},"start":{"column":18,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"15","location":{"end":{"column":16,"line":11},"start":{"column":9,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"},{"id":"20","location":{"end":{"column":37,"line":22},"start":{"column":14,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"22","location":{"end":{"column":107,"line":24},"start":{"column":12,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":14,"line":27},"start":{"column":12,"line":27}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"24","location":{"end":{"column":105,"line":24},"start":{"column":98,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"26","location":{"end":{"column":4,"line":33},"start":{"column":32,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"27","location":{"end":{"column":63,"line":32},"start":{"column":44,"line":32}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"28","location":{"end":{"column":62,"line":32},"start":{"column":51,"line":32}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"21","location":{"end":{"column":6,"line":25},"start":{"column":16,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"23","location":{"end":{"column":36,"line":24},"start":{"column":27,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout"}],"source":"import {controller, httpGet, response, request, BaseHttpController} from 'inversify-express-utils';\nimport { inject } from 'inversify';\nimport { Request, Response } from 'express';\nimport { CuponByRutQuery } from '../../application/port/in/CuponByRutQuery';\n\nimport TYPES from './../../config/types';\nimport {ApiOperationGet, ApiPath, SwaggerDefinitionConstant} from \"swagger-express-ts\";\n\n@ApiPath({\n  path: \"/api/v1/cupones\",\n  name: \"Cupon\",\n})\n@controller('/api/v1/cupones')\nexport default class CuponController extends BaseHttpController {\n\n  constructor(@inject(TYPES.CuponByRutQuery) private cuponByRutQuery: CuponByRutQuery) {\n    super();\n  }\n\n  @ApiOperationGet({\n    description: \"Get cupones list desc\",\n    summary: \"Get cupones list summ\",\n    responses: {\n      200: { description: \"Success\", type: SwaggerDefinitionConstant.Response.Type.ARRAY, model: 'Cupon' }\n    }\n  })\n  @httpGet('')\n  public async listAllCupones (\n    @request() req: Request,\n    @response() res: Response) {\n    const result = await this.cuponByRutQuery.listCuponByRut();\n    return res.status(200).json(result.map(it => ({id: it.id})));\n  }\n\n}\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/adapter/rest/CuponRestAdapter.test.ts":{"language":"typescript","mutants":[{"id":"29","location":{"end":{"column":18,"line":5},"start":{"column":11,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":2,"line":24},"start":{"column":42,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"30","location":{"end":{"column":34,"line":8},"start":{"column":10,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"33","location":{"end":{"column":4,"line":17},"start":{"column":48,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"32","location":{"end":{"column":34,"line":12},"start":{"column":6,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"34","location":{"end":{"column":26,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"35","location":{"end":{"column":25,"line":13},"start":{"column":19,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"36","location":{"end":{"column":71,"line":14},"start":{"column":44,"line":14}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"},{"id":"37","location":{"end":{"column":85,"line":16},"start":{"column":50,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"38","location":{"end":{"column":32,"line":19},"start":{"column":6,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"39","location":{"end":{"column":4,"line":22},"start":{"column":46,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"42","location":{"end":{"column":109,"line":21},"start":{"column":67,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"41","location":{"end":{"column":87,"line":20},"start":{"column":75,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"40","location":{"end":{"column":89,"line":20},"start":{"column":44,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"}],"source":"import { CuponRestAdapter } from './CuponRestAdapter';\nimport axios from 'axios';\nimport \"reflect-metadata\";\n\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\ndescribe('CuponRestAdapter tests', () => {\n\n  const cuponRestAdapter = new CuponRestAdapter();\n\n  it('Fetch cupones successfully', async () => {\n    const data = [{id:2}];\n    mockedAxios.get.mockImplementationOnce(() => Promise.resolve(data));\n    await expect(cuponRestAdapter.findAllByRut()).resolves.toEqual(data);\n    expect(mockedAxios.get).toHaveBeenCalledWith('http://httpstat.us/500?sleep=5000');\n  })\n\n  it('Fetch cupones with error', async () => {\n    mockedAxios.get.mockImplementationOnce(() => Promise.reject(new Error('some error')));\n    await expect(cuponRestAdapter.findAllByRut()).rejects.toThrow('Error fetching url: https://httpstatu.us');\n  })\n\n})\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/adapter/rest/CuponRestAdapter.ts":{"language":"typescript","mutants":[{"id":"43","location":{"end":{"column":4,"line":19},"start":{"column":48,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"44","location":{"end":{"column":6,"line":15},"start":{"column":9,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"45","location":{"end":{"column":73,"line":12},"start":{"column":38,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"46","location":{"end":{"column":25,"line":13},"start":{"column":19,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"47","location":{"end":{"column":23,"line":14},"start":{"column":14,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"48","location":{"end":{"column":22,"line":14},"start":{"column":15,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"49","location":{"end":{"column":6,"line":18},"start":{"column":21,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"50","location":{"end":{"column":36,"line":16},"start":{"column":19,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"51","location":{"end":{"column":87,"line":17},"start":{"column":45,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { CuponRepository } from './../../application/port/out/CuponRepository';\nimport { Cupon } from './../../domain/Cupon';\nimport { injectable } from 'inversify';\nimport { InternalErrorException } from './../../config/exception/InternalErrorException';\n\nimport axios from 'axios';\n\n@injectable()\nexport class CuponRestAdapter implements CuponRepository {\n  public async findAllByRut():Promise<Cupon[]> {\n    try {\n      const {data} = await axios.get('http://httpstat.us/500?sleep=5000');\n      console.log('Data', data);\n      return [{id: 2}];\n    } catch (error) {\n      console.log('Error fetching!', error);\n      throw new InternalErrorException(500, 'Error fetching url: https://httpstatu.us');\n    }\n  }\n}\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/application/usecase/ListCuponesByRutUseCase.test.ts":{"language":"typescript","mutants":[{"id":"52","location":{"end":{"column":29,"line":5},"start":{"column":20,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"53","location":{"end":{"column":28,"line":5},"start":{"column":21,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"54","location":{"end":{"column":4,"line":9},"start":{"column":48,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"55","location":{"end":{"column":41,"line":12},"start":{"column":10,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"56","location":{"end":{"column":2,"line":19},"start":{"column":49,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"57","location":{"end":{"column":43,"line":15},"start":{"column":6,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"58","location":{"end":{"column":4,"line":17},"start":{"column":57,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"}],"source":"import { ListCuponesByRutUseCase } from './ListCuponesByRutUseCase';\nimport { CuponRepository } from '../port/out/CuponRepository';\nimport { Cupon } from './../../domain/Cupon';\n\nconst mockedData = [{id: 1}];\nclass MockedCuponRepository implements CuponRepository {\n  public async findAllByRut():Promise<Cupon[]> {\n    return Promise.resolve(mockedData);\n  }\n}\n\ndescribe('ListCuponesByRutUseCase tests', () => {\n  const listCuponesByRutUseCase = new ListCuponesByRutUseCase(new MockedCuponRepository());\n\n  it('when a list of cupones is retrieved', async () => {\n    await expect(listCuponesByRutUseCase.listCuponByRut()).resolves.toBe(mockedData);\n  });\n\n});\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/config/exception/InternalErrorException.ts":{"language":"typescript","mutants":[{"id":"61","location":{"end":{"column":4,"line":8},"start":{"column":46,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"}],"source":"export class InternalErrorException extends Error {\n  status:number;\n  message:string;\n  constructor(status:number, message:string) {\n    super(message);\n    this.status = status;\n    this.message = message;\n  }\n}\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/application/usecase/ListCuponesByRutUseCase.ts":{"language":"typescript","mutants":[{"id":"59","location":{"end":{"column":4,"line":17},"start":{"column":44,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"60","location":{"end":{"column":41,"line":15},"start":{"column":17,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { injectable, inject } from 'inversify';\nimport { CuponByRutQuery } from './../port/in/CuponByRutQuery';\nimport { CuponRepository } from './../port/out/CuponRepository';\nimport { Cupon } from './../../domain/Cupon';\n\nimport TYPES from './../../config/types';\n\n@injectable()\nexport class ListCuponesByRutUseCase implements CuponByRutQuery {\n\n  constructor(@inject(TYPES.CuponRepository) private cuponRepository: CuponRepository) { }\n\n  async listCuponByRut(): Promise<Cupon[]> {\n    const response = await this.cuponRepository.findAllByRut();\n    console.log('Response from use case', response);\n    return response;\n  }\n\n}\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/config/types.ts":{"language":"typescript","mutants":[{"id":"64","location":{"end":{"column":50,"line":3},"start":{"column":33,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"63","location":{"end":{"column":50,"line":2},"start":{"column":33,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"62","location":{"end":{"column":2,"line":4},"start":{"column":15,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"}],"source":"const TYPES = {\n    CuponByRutQuery: Symbol.for('CuponByRutQuery'),\n    CuponRepository: Symbol.for('CuponRepository')\n};\n\nexport default TYPES;\n"},"/Users/mapsi/Development/Repositories/fif-payments-bff-cupones/src/domain/Cupon.ts":{"language":"typescript","mutants":[{"id":"65","location":{"end":{"column":2,"line":6},"start":{"column":12,"line":3}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"66","location":{"end":{"column":36,"line":4},"start":{"column":17,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"67","location":{"end":{"column":17,"line":5},"start":{"column":10,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"68","location":{"end":{"column":4,"line":12},"start":{"column":22,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"69","location":{"end":{"column":34,"line":9},"start":{"column":19,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"70","location":{"end":{"column":20,"line":10},"start":{"column":16,"line":10}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"71","location":{"end":{"column":27,"line":11},"start":{"column":14,"line":11}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"73","location":{"end":{"column":4,"line":17},"start":{"column":26,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"72","location":{"end":{"column":26,"line":11},"start":{"column":15,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { ApiModel, ApiModelProperty } from 'swagger-express-ts';\n\n@ApiModel( {\n  description : \"Cupon description\" ,\n  name : \"Cupon\"\n} )\nexport class Cupon {\n  @ApiModelProperty( {\n    description : \"Id of version\" ,\n    required : true,\n    example: ['123456789']\n  } )\n  public id: number;\n\n  constructor(id:number) {\n    this.id = id;\n  }\n\n\n\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};